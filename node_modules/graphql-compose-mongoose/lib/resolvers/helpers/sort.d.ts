import type { Document, Model } from 'mongoose';
import { EnumTypeComposer, InterfaceTypeComposer, ObjectTypeComposer, ObjectTypeComposerArgumentConfigMapDefinition, SchemaComposer } from 'graphql-compose';
import type { ExtendedResolveParams } from '../index';
export type SortHelperArgsOpts = {
    multi?: boolean;
    sortTypeName?: string;
};
export declare function sortHelperArgs<TDoc extends Document = any>(tc: ObjectTypeComposer<TDoc, any> | InterfaceTypeComposer<TDoc, any>, model: Model<TDoc>, opts?: SortHelperArgsOpts): ObjectTypeComposerArgumentConfigMapDefinition<{
    sort: any;
}>;
export declare function sortHelper(resolveParams: ExtendedResolveParams): void;
export declare function getSortTypeFromModel<TContext>(typeName: string, model: Model<any>, schemaComposer: SchemaComposer<TContext>): EnumTypeComposer<TContext>;
//# sourceMappingURL=sort.d.ts.map