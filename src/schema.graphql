type Query {
  todoById(_id: MongoID!): Todo
  todoByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsTodoInput): [Todo!]!
  todoOne(
    """Filter by fields"""
    filter: FilterFindOneTodoInput
    skip: Int
    sort: SortFindOneTodoInput
  ): Todo
  todoMany(
    """Filter by fields"""
    filter: FilterFindManyTodoInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyTodoInput
  ): [Todo!]!
  todoCount(
    """Filter by fields"""
    filter: FilterCountTodoInput
  ): Int
}

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  todoCreateOne(record: CreateOneTodoInput!): CreateOneTodoPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  todoCreateMany(records: [CreateManyTodoInput!]!): CreateManyTodoPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  todoUpdateById(_id: MongoID!, record: UpdateByIdTodoInput!): UpdateByIdTodoPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  todoUpdateOne(
    record: UpdateOneTodoInput!

    """Filter by fields"""
    filter: FilterUpdateOneTodoInput
    sort: SortUpdateOneTodoInput
    skip: Int
  ): UpdateOneTodoPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  todoUpdateMany(
    record: UpdateManyTodoInput!

    """Filter by fields"""
    filter: FilterUpdateManyTodoInput
    sort: SortUpdateManyTodoInput
    skip: Int
    limit: Int = 100
  ): UpdateManyTodoPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  todoRemoveById(_id: MongoID!): RemoveByIdTodoPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  todoRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneTodoInput
    sort: SortRemoveOneTodoInput
  ): RemoveOneTodoPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  todoRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyTodoInput!
    limit: Int = 100
  ): RemoveManyTodoPayload
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum SortFindByIdsTodoInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyTodoInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneTodoInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneTodoInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyTodoInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneTodoInput {
  _ID_ASC
  _ID_DESC
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

type CreateManyTodoPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Todo!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type CreateOneTodoPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Todo

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdTodoPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Todo

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyTodoPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneTodoPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Todo

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type Todo {
  title: String!
  completed: Boolean
  _id: MongoID!
}

type UpdateByIdTodoPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Todo

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateManyTodoPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type UpdateOneTodoPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Todo

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyTodoInput {
  title: String!
  completed: Boolean
}

""""""
input CreateOneTodoInput {
  title: String!
  completed: Boolean
}

input FilterCountTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountTodoOperatorsInput
  OR: [FilterCountTodoInput!]
  AND: [FilterCountTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountTodoOperatorsInput {
  _id: FilterCountTodo_idOperatorsInput
}

input FilterFindManyTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyTodoOperatorsInput
  OR: [FilterFindManyTodoInput!]
  AND: [FilterFindManyTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyTodoOperatorsInput {
  _id: FilterFindManyTodo_idOperatorsInput
}

input FilterFindOneTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneTodoOperatorsInput
  OR: [FilterFindOneTodoInput!]
  AND: [FilterFindOneTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneTodoOperatorsInput {
  _id: FilterFindOneTodo_idOperatorsInput
}

input FilterRemoveManyTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyTodoOperatorsInput
  OR: [FilterRemoveManyTodoInput!]
  AND: [FilterRemoveManyTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyTodoOperatorsInput {
  _id: FilterRemoveManyTodo_idOperatorsInput
}

input FilterRemoveOneTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneTodoOperatorsInput
  OR: [FilterRemoveOneTodoInput!]
  AND: [FilterRemoveOneTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneTodoOperatorsInput {
  _id: FilterRemoveOneTodo_idOperatorsInput
}

input FilterUpdateManyTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyTodoOperatorsInput
  OR: [FilterUpdateManyTodoInput!]
  AND: [FilterUpdateManyTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyTodoOperatorsInput {
  _id: FilterUpdateManyTodo_idOperatorsInput
}

input FilterUpdateOneTodo_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneTodoInput {
  title: String
  completed: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneTodoOperatorsInput
  OR: [FilterUpdateOneTodoInput!]
  AND: [FilterUpdateOneTodoInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneTodoOperatorsInput {
  _id: FilterUpdateOneTodo_idOperatorsInput
}

""""""
input UpdateByIdTodoInput {
  title: String
  completed: Boolean
}

""""""
input UpdateManyTodoInput {
  title: String
  completed: Boolean
}

""""""
input UpdateOneTodoInput {
  title: String
  completed: Boolean
}